name: "sitkoru/docker-deploy-action"
description: "Action to deploy docker container to server"
branding:
  icon: "package"
  color: "blue"

inputs:
  name:
    description: "Service name"
    required: true
  version:
    description: "Service version"
    required: true
  host:
    description: "Deploy host"
    required: true
  user:
    description: "Deploy user"
    required: true
  key:
    description: "Deploy ssh key"
    required: true
  dir:
    description: "Host working dir with docker-compose script"
    required: true
  script:
    description: "Script to run docker-compose commands"
    required: true
    default: "prod.run"
  vault_policy:
    description: "Vault policy"
    required: false
  vault_container:
    description: "Vault container"
    required: false
  vault_username:
    description: "Vault username"
    required: false
  vault_password:
    description: "Vault password"
    required: false
  vault_period:
    description: "Vault token period"
    required: false
    default: 12h
  docker_registry_login:
    description: "Vault password"
    required: false
  docker_registry_password:
    description: "Vault password"
    required: false
  docker_registry_url:
    description: "Vault password"
    required: false

runs:
  using: "composite"
  steps:
    - name: Update production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ inputs.host }}
        username: ${{ inputs.user }}
        key: ${{ inputs.key }}
        script_stop: true
        script: |
          export VERSION=${{ inputs.version }}
          if [[ -n "${{ inputs.vault_policy }}" ]]; then
            echo "Generate Vault token"
            export VAULT__TOKEN=$(docker exec -e VAULT_TOKEN=$(docker exec ${{ inputs.vault_container }} vault login -method=userpass -token-only -no-store username=${{ inputs.vault_username }} password=${{ inputs.vault_password }}) ${{ inputs.vault_container }} vault token create -policy=${{ inputs.vault_policy }} --orphan -field=token --period=${{ inputs.vault_period }})
          fi
          if [[ -n "${{ inputs.docker_registry_url }}" ]]; then
            echo "Login to docker registry"
            echo '${{ inputs.docker_registry_password }}' | docker login ${{ inputs.docker_registry_url }} -u ${{ inputs.docker_registry_login }} --password-stdin
          fi
          cd ${{ inputs.dir }}
          echo "Pull service image"
          ./${{ inputs.script }} pull ${{ inputs.name }}
          echo "Recreate container"
          ./${{ inputs.script }} up -d ${{ inputs.name }}
